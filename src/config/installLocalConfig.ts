import { getEslintConfig } from '../opinions/eslint';
import { getPrettierConfig } from '../opinions/prettier';
import { promisify } from 'util';
import fs from 'fs';
import { getTypescriptConfig } from '../opinions/typescript';
import { getEditorConfig } from '../opinions/editorconfig';
import { shouldAutoGenerateFile, createExportsJsFile, createJsonFile, createIniFile } from './autoGenerated';

async function installEslintConfig(): Promise<void> {
  const eslintRc = './.eslintrc.js';

  if (await shouldAutoGenerateFile(eslintRc)) {
    const config = await getEslintConfig();
    const configFile = createExportsJsFile(JSON.stringify(config, null, 4));
    await promisify(fs.writeFile)(eslintRc, configFile);
  }
}

async function installPrettierConfig(): Promise<void> {
  const prettierRc = './.prettierrc.js';

  if (await shouldAutoGenerateFile(prettierRc)) {
    const config = await getPrettierConfig();
    const configFile = createExportsJsFile(JSON.stringify(config, null, 4));
    await promisify(fs.writeFile)(prettierRc, configFile);
  }
}

async function installTypescriptConfig(): Promise<void> {
  const tsconfig = './tsconfig.json';

  if (await shouldAutoGenerateFile(tsconfig)) {
    const config = await getTypescriptConfig();
    const configFile = createJsonFile(config);
    await promisify(fs.writeFile)(tsconfig, configFile);
  }
}

async function installEditorConfig(): Promise<void> {
  const editorconfig = './.editorconfig';

  if (await shouldAutoGenerateFile(editorconfig)) {
    const config = await getEditorConfig();
    const configFile = createIniFile(config);
    await promisify(fs.writeFile)(editorconfig, configFile);
  }
}

export async function installLocalConfig(): Promise<void> {
  await Promise.all([installEslintConfig(), installPrettierConfig(), installTypescriptConfig(), installEditorConfig()]);
}
